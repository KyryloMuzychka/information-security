text_to_bits:
Эта функция принимает текстовую строку text, кодировку (по умолчанию "utf-8") и обработчик ошибок (по умолчанию "surrogatepass").
Она использует метод .encode() для кодирования текста в байты, а затем int.from_bytes() для преобразования байтов в целое число.
Полученное целое число преобразуется в бинарную строку с помощью bin() с удалением префикса '0b' [2:].
Бинарная строка разбивается на отдельные биты, и каждый бит преобразуется в целое число (0 или 1).
Функция возвращает список целых чисел (битов).

text_from_bits:
Эта функция принимает список целых чисел (битов), кодировку (по умолчанию "utf-8") и обработчик ошибок (по умолчанию "surrogatepass").
Она объединяет список битов в одну бинарную строку bit_string.
Затем бинарная строка bit_string преобразуется в целое число n в двоичной системе счисления.
Функция затем создает массив байтов byte_array и извлекает байты из целого числа n, добавляя их в массив, и продолжает это до тех пор, пока n не станет равным 0.

[2:] - это срез (slice) строки в Python. В данном контексте, он используется для удаления первых двух символов из строки.
В двоичном представлении числа, Python добавляет префикс '0b', чтобы указать, что это двоичное число.
Например, если у вас есть строка '0b110101', [2:] будет удалять первые два символа '0b', оставляя только '110101'.
В данной строке byte_array.append(n & 0xff), происходит добавление байта в массив байтов (byte_array). Давайте разберем, что происходит в этой операции:
n - это целое число, которое вы хотите преобразовать в байт.
0xff - это шестнадцатеричное число (255 в десятичной системе), представляющее байт с восемью установленными битами (11111111 в двоичной системе).
n & 0xff - это операция побитового И между n и 0xff. Это позволяет извлечь младший байт из числа n, так как все остальные биты становятся равными нулю.
Например, если n равно 4629 (или в двоичной системе 1001000010101), то операция n & 0xff вернет 69 (или в двоичной системе 1000101), что является младшим байтом числа.
Таким образом, строка byte_array.append(n & 0xff) добавляет младший байт числа n в массив байтов byte_array, и таким образом, массив byte_array постепенно заполняется байтами из числа n, в правильном порядке, который затем будет использоваться для декодирования в текст.
